// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicketingSystem.Core.Database;

#nullable disable

namespace TicketingSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241004080808_DeleteCustomMetadataForTickets")]
    partial class DeleteCustomMetadataForTickets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "TicketMetadataTypeEnum", "ticket_metadata_type_enum", new[] { "string", "int", "bool", "date" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "TicketStatusEnum", "ticket_status_enum", new[] { "open", "in_progress", "resolved" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "TicketTypeEnum", "ticket_type_enum", new[] { "bug", "improvement", "epic" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConfigurationMapFieldsRelation", b =>
                {
                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("ConfigurationId", "MetadataId");

                    b.HasIndex("MetadataId");

                    b.ToTable("ConfigurationMapFieldsRelation");
                });

            modelBuilder.Entity("TagEntityTicketEntity", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("TagId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("TagEntityTicketEntity");
                });

            modelBuilder.Entity("TicketingSystem.Common.Models.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("TicketingSystem.Common.Models.Entities.TicketConfigurationMapEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("TicketType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("tickets_configuration", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("51f4e55f-d274-496e-8c38-803ed72b1fb5"),
                            TicketType = 0
                        },
                        new
                        {
                            Id = new Guid("df44f012-eef2-470f-9920-ee9f415eee57"),
                            TicketType = 1
                        },
                        new
                        {
                            Id = new Guid("0c9edcab-e027-44f8-99f5-95524cd3e856"),
                            TicketType = 2
                        });
                });

            modelBuilder.Entity("TicketingSystem.Common.Models.Entities.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AffectedVersion")
                        .HasColumnType("text");

                    b.Property<Guid?>("Assignee")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid[]>("RelatedElements")
                        .HasColumnType("uuid[]");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("TicketingSystem.Common.Models.Entities.TicketMetadataFieldEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("tickets_configuration_fields", (string)null);
                });

            modelBuilder.Entity("ConfigurationMapFieldsRelation", b =>
                {
                    b.HasOne("TicketingSystem.Common.Models.Entities.TicketConfigurationMapEntity", null)
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Common.Models.Entities.TicketMetadataFieldEntity", null)
                        .WithMany()
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagEntityTicketEntity", b =>
                {
                    b.HasOne("TicketingSystem.Common.Models.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Common.Models.Entities.TicketEntity", null)
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingSystem.Common.Models.Entities.TicketEntity", b =>
                {
                    b.HasOne("TicketingSystem.Common.Models.Entities.TicketConfigurationMapEntity", "MetadataConfiguration")
                        .WithMany("Tickets")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataConfiguration");
                });

            modelBuilder.Entity("TicketingSystem.Common.Models.Entities.TicketConfigurationMapEntity", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
